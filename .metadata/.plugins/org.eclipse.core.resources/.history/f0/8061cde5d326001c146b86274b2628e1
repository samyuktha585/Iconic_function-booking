package com.iconicsbooking.controller;

import java.util.List;
import org.springframework.http.*;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iconicsbooking.model.Events;
import com.iconicsbooking.service.IEventService;

@RestController
@RequestMapping("events_api")
public class EventsController {
	@Autowired
	IEventService eventService;
	
	@PostMapping("/events")
	Events addEvent(@RequestBody Events event)
	{
	return eventService.addEvent(event);
	}
	@DeleteMapping("/events")
	void deleteEvent(int eventId)
	{
		eventService.deleteEvent(eventId);
	}
	@GetMapping("/events")
	List<Events> getAll()
	{
		return eventService.getAll();
	}
	@GetMapping("/events/{eventId}")
	ResponseEntity<Events> getById(@PathVariable("eventId") int eventId)
	{
		Events event = eventService.getById(eventId);
		HttpHeaders headers = new HttpHeaders();
		headers.add("desc","Get one watch by Id");
		headers.add("info","Returning one watch");
		ResponseEntity<Events> responseEvent = new ResponseEntity<Events>(event,headers,HttpStatus.OK);
		return responseEvent;
	}
	@GetMapping("/events/eventName/{eventName}")
	ResponseEntity<List<Events>> getByEventName(@PathVariable("eventName") String eventName)
	{
		List<Events> eventsByname = eventService.getByEventName(eventName);
		HttpHeaders headers = new HttpHeaders();
		headers.add("desc","Get eventList By event name");
		return ResponseEntity.status(HttpStatus.OK).headers(headers).body(eventsByname);
	}
	@GetMapping("/events/eventProvider/{eventProvider}")
	ResponseEntity<List<Events>> getByEventProvider(@PathVariable("eventProvider") String eventProvider)
	{
		List<Events> eventsByProvider = eventService.getByEventProvider(eventProvider);
		HttpHeaders headers = new HttpHeaders();
		headers.add("desc","Get eventList By event provider");
		return ResponseEntity.status(HttpStatus.OK).headers(headers).body(eventsByProvider);
	}
	@GetMapping("/events/priority/{priority}")
	ResponseEntity<List<Events>> getByEventPriority(@PathVariable("priority") String priority)
	{
		List<Events> eventsByPriority = eventService.getByPriority(priority);
		HttpHeaders headers = new HttpHeaders();
		headers.add("desc","Get eventList By event priority");
		return ResponseEntity.status(HttpStatus.OK).headers(headers).body(eventsByPriority);
	}
	}
	

